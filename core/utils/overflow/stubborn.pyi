from enum import Enum
from typing import List, Optional, Union, Any, Callable


class Ring(Enum):
    RQ: int
    TQ: int

class NTTModified:
    config: Any
    polynomial: List[int]
    Ring: Ring

    def __init__(self, config: Any, polynomial: Optional[List[int]] = None, ring: Optional[Ring] = Ring.RQ) -> None: ...

    @property
    def ring(self) -> Ring: ...

    def ntt(self) -> NTTModified: ...

    def inverse(self) -> NTTModified: ...

    def norm(self) -> int: ...

    def check(self, start: int, end: Optional[int]=None): ...

    def apply(self, function: Callable, *args: int, other: Optional[NTTModified]=None) -> NTTModified: ...

    def __add__(self, other: NTTModified) -> NTTModified: ...

    def __sub__(self, other: NTTModified) -> NTTModified: ...

    def __neg__(self) -> NTTModified: ...

    def __repr__(self) -> str: ...

    def __mul__(self, other: Union[NTTModified, int]) -> NTTModified: ...

    def __getitem__(self, item: int) -> int: ...

    def __setitem__(self, key: int, value: int) -> None: ...

Matrix = List[NTTModified]

class VectorNTT:
    config: Any
    vector: Matrix
    ring: Ring

    def __init__(self, config, vector: Optional[Matrix]=None, ring: Optional[Ring]=Ring.RQ) -> None: ...

    def __getitem__(self, item: int) -> NTTModified: ...

    def to_list(self) -> List[List[int]]: ...

    def from_list(self, lst: List[List[int]]) -> None: ...

    def apply(self, function: Callable, *args: Optional[int], other: Optional[VectorNTT]=None) -> VectorNTT: ...

    def ntt(self) -> VectorNTT: ...

    def inverse(self) -> VectorNTT: ...

    def norm(self) -> int: ...

    def check(self, start: int, end: Optional[int]=None): ...

    def __setitem__(self, key: int, value: NTTModified) -> None: ...

    def __repr__(self) -> str: ...

    def __add__(self, other: VectorNTT) -> VectorNTT: ...

    def __sub__(self, other: VectorNTT) -> VectorNTT: ...

    def __neg__(self) -> VectorNTT: ...

    def __mul__(self, other: Union[NTTModified, List[VectorNTT], int]) -> VectorNTT: ...
