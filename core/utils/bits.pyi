from typing import List, Optional

def bits_to_bytes(bit_array: List[int]) -> bytes: ...

def bytes_to_bits(byte_array: bytes) -> List[int]: ...

def byte_encode(f: List[int], d: int) -> bytes: ...

def byte_decode(byte_array: bytes, d: int) -> List[int]: ...

def compress(x: List[int],d: int,q: Optional[int] = 3329) -> List[int]: ...

def decompress(y:List[int], d:int, q: Optional[int] = 3329) -> List[int]: ...

def int_to_bits(integer: int, length: int) -> str: ...

def bits_to_int(bit_string: str, length: int) -> int: ...

def int_to_bytes(integer: int, length: int) -> bytes: ...

def bytes_to_int(byte_array: bytes, length: int) -> int: ...

def coeff_from_three_bytes(b0: bytes, b1: bytes, b2: bytes, q:Optional[int] = 8380417) -> int | None: ...

def coeff_from_half_byte(b: int, ETA: int) -> int | None: ...
